model/index.js

'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.js')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;


var express = require("express");
var router = express.Router();
const Validator = require('fastest-validator')
const v = new Validator();
const{Notes} = require("../models/Notes.js");

router.get("/", function (req,res,next){
    res.send("Bismillah TBPWEB");
});

router.get("/env", function (req, res, next){
    res.send(process.env.APP_NAME);
});

router.post("/", async(req,res,next)=>{
    //validation
    const schema = {
        title: "string",
        description: "string|optional",
    };
    const validate = v.validate(req.body, schema);
    if(validate.length){
        return res.status(400).json(validate);
    }
    //proses create
    const note = await Notes.create(req.body);
    res.json({
        status: 200,
        message: "Yee Alhamdulillah bisa dh kebuat",
        data: note,
    });

    // PUT
        router.put("/:id", async (req, res, next) => {
        const id = req.params.id;
        let note = await Notes.findByPk(id);
        if (!note)
        {
        return res.status(404).json({ status: 404, message: "Data not found" });
        }
    }
});

module.exports = router;